{
 "nbformat": 4,
 "nbformat_minor": 0,
 "metadata": {
  "colab": {
   "name": "divine_transformer_big.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "name": "python3",
   "language": "python",
   "display_name": "Python 3"
  },
  "language_info": {
   "name": "python"
  },
  "accelerator": "GPU"
 },
 "cells": [
  {
   "cell_type": "code",
   "metadata": {
    "id": "IktUvj6AndiG",
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "status": "ok",
     "timestamp": 1619972145353,
     "user_tz": -120,
     "elapsed": 523,
     "user": {
      "displayName": "Serban Cristian Tudosie",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjKcHtWlRmEx5gPgHp_XElg5R9_lOdYkNWR-WiUiw=s64",
      "userId": "15345692188992114213"
     }
    },
    "outputId": "6b8e831f-b52d-45a8-8377-4fd5f48d66b1"
   },
   "source": [
    "import io\n",
    "import pickle\n",
    "import time\n",
    "import numpy as np\n",
    "import random\n",
    "import sys\n",
    "import time\n",
    "import copy\n",
    "import re\n",
    "import tensorflow as tf\n",
    "\n",
    "'''\n",
    "ORIGINALS PARAMETERS FROM TENSORFLOW\n",
    "\n",
    "num_layers = 4\n",
    "d_model = 128\n",
    "dff = 512\n",
    "num_heads = 8\n",
    "dropout_rate = 0.1\n",
    "'''\n",
    "\n",
    "# GLOBAL VARIABLES\n",
    "EPOCHS = 20\n",
    "num_layers = 4\n",
    "d_model = 256\n",
    "dff = 1024\n",
    "num_heads = 8\n",
    "dropout_rate = 0.1\n",
    "BATCH_SIZE = 64\n",
    "PRINT_EACH_BATCHES = 100\n",
    "\n",
    "N_BEAM = 2\n",
    "K = 20\n",
    "TEMP = 1.4\n",
    "\n",
    "sliding_window_X = 6\n",
    "sliding_window_y = 3\n",
    "SAVING_STEP = 5\n",
    "\n",
    "##########################\n",
    "gpu_info = !nvidia-smi\n",
    "gpu_info = '\\n'.join(gpu_info)\n",
    "if gpu_info.find('failed') >= 0:\n",
    "  print('Select the Runtime > \"Change runtime type\" menu to enable a GPU accelerator, ')\n",
    "  print('and then re-execute this cell.')\n",
    "else:\n",
    "  print(gpu_info)"
   ],
   "execution_count": 13,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mon May  3 23:14:41 2021       \n",
      "+-----------------------------------------------------------------------------+\n",
      "| NVIDIA-SMI 460.67       Driver Version: 460.67       CUDA Version: 11.2     |\n",
      "|-------------------------------+----------------------+----------------------+\n",
      "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
      "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
      "|                               |                      |               MIG M. |\n",
      "|===============================+======================+======================|\n",
      "|   0  GeForce MX130       Off  | 00000000:01:00.0 Off |                  N/A |\n",
      "| N/A   44C    P8    N/A /  N/A |   1845MiB /  2004MiB |      0%      Default |\n",
      "|                               |                      |                  N/A |\n",
      "+-------------------------------+----------------------+----------------------+\n",
      "                                                                               \n",
      "+-----------------------------------------------------------------------------+\n",
      "| Processes:                                                                  |\n",
      "|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n",
      "|        ID   ID                                                   Usage      |\n",
      "|=============================================================================|\n",
      "|    0   N/A  N/A       834      G   /usr/lib/Xorg                       2MiB |\n",
      "|    0   N/A  N/A      8029      C   ...ingCuda/venv38/bin/python     1839MiB |\n",
      "+-----------------------------------------------------------------------------+\n"
     ]
    }
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "YNtKlcYAqGYw",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1619972148266,
     "user_tz": -120,
     "elapsed": 3426,
     "user": {
      "displayName": "Serban Cristian Tudosie",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjKcHtWlRmEx5gPgHp_XElg5R9_lOdYkNWR-WiUiw=s64",
      "userId": "15345692188992114213"
     }
    },
    "outputId": "a2710b89-5341-457d-8350-df2c2a9b1302"
   },
   "source": [
    "\n",
    "# UNCOMMENT IF YOU ARE ON COLAB\n",
    "\n",
    "!pip install levenshtein\n",
    "from google.colab import drive\n",
    "drive.mount('/content/gdrive')\n",
    "root_path = 'gdrive/My Drive/transformer/'\n",
    "\n",
    "\n",
    "# REMEMBER TO SET THE ROOT PATH WITH A REGEX IN ALL THE NOTEBOOK\n",
    "# gdrive/My Drive/transformer/\n",
    "\n",
    "from Levenshtein import distance as levenshtein_distance"
   ],
   "execution_count": 14,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "lwsdLDJMn0ar"
   },
   "source": [
    "## ATTENTION"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "id": "_qm-mmfSnv-y",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1619972148267,
     "user_tz": -120,
     "elapsed": 3415,
     "user": {
      "displayName": "Serban Cristian Tudosie",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjKcHtWlRmEx5gPgHp_XElg5R9_lOdYkNWR-WiUiw=s64",
      "userId": "15345692188992114213"
     }
    }
   },
   "source": [
    "\n",
    "def scaled_dot_product_attention(q, k, v, mask):\n",
    "    matmul_qk = tf.matmul(q, k, transpose_b=True)  # (..., seq_len_q, seq_len_k)\n",
    "    # scale matmul_qk\n",
    "    dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "    scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "    # add the mask to the scaled tensor.\n",
    "    if mask is not None:\n",
    "        scaled_attention_logits += (mask * -1e9)\n",
    "    # softmax is normalized on the last axis (seq_len_k) so that the scores\n",
    "    # add up to 1.\n",
    "    attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)  # (..., seq_len_q, seq_len_k)\n",
    "    output = tf.matmul(attention_weights, v)  # (..., seq_len_q, depth_v)\n",
    "    return output, attention_weights\n",
    "\n",
    "\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads):\n",
    "        super(MultiHeadAttention, self).__init__()\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        assert d_model % self.num_heads == 0\n",
    "        self.depth = d_model // self.num_heads\n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "\n",
    "    def split_heads(self, x, batch_size):\n",
    "        \"\"\"Split the last dimension into (num_heads, depth).\n",
    "        Transpose the result such that the shape is (batch_size, num_heads, seq_len, depth)\n",
    "        \"\"\"\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "\n",
    "    def call(self, v, k, q, mask):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        # (batch_size, seq_len, d_model)\n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        # (batch_size, num_heads, seq_len_*, depth)\n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        # scaled_attention.shape == (batch_size, num_heads, seq_len_q, depth)\n",
    "        # attention_weights.shape == (batch_size, num_heads, seq_len_q, seq_len_k)\n",
    "        scaled_attention, attention_weights = scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        scaled_attention = tf.transpose(scaled_attention,\n",
    "                                        perm=[0, 2, 1, 3])\n",
    "        concat_attention = tf.reshape(scaled_attention,\n",
    "                                      (batch_size, -1, self.d_model))  # (batch_size, seq_len_q, d_model)\n",
    "        output = self.dense(concat_attention)  # (batch_size, seq_len_q, d_model)\n",
    "        return output, attention_weights\n",
    "\n"
   ],
   "execution_count": 15,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "CfdLb_Y0HkIs"
   },
   "source": [
    "# BEAM SEARCH"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "id": "HB-Uhb6XHjUU",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1619972148268,
     "user_tz": -120,
     "elapsed": 3402,
     "user": {
      "displayName": "Serban Cristian Tudosie",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjKcHtWlRmEx5gPgHp_XElg5R9_lOdYkNWR-WiUiw=s64",
      "userId": "15345692188992114213"
     }
    }
   },
   "source": [
    "class Flow:\n",
    "    def __init__(self, init, prob):\n",
    "        self.output = init\n",
    "        self.prob = prob\n",
    "\n",
    "def sampling_flows(flows_array):\n",
    "    all_flows = copy.deepcopy(flows_array)\n",
    "    drawn_flows = []\n",
    "    for _ in range(N_BEAM):\n",
    "        top_k_prob = [f.prob for f in all_flows]\n",
    "        top_k_prob = np.array([e if e > 0 else 0.05 for e in top_k_prob])\n",
    "        top_k_prob = top_k_prob ** TEMP\n",
    "        prob_sum = sum(top_k_prob)\n",
    "        r = random.random() * prob_sum\n",
    "        j = 0\n",
    "        while True:\n",
    "            if r - top_k_prob[j] <= 0:\n",
    "                drawn_flows.append(all_flows[j])\n",
    "                all_flows.pop(j)\n",
    "                break\n",
    "            r -= top_k_prob[j]\n",
    "            j += 1\n",
    "    return drawn_flows\n",
    "\n",
    "\n",
    "def next_predictions(encoder_input, output, k, argmax):\n",
    "    enc_padding_mask, combined_mask, dec_padding_mask = create_masks(encoder_input, output)\n",
    "    predictions, attention_weights = transformer(encoder_input,\n",
    "                                                 output,\n",
    "                                                 False,\n",
    "                                                 enc_padding_mask,\n",
    "                                                 combined_mask,\n",
    "                                                 dec_padding_mask)\n",
    "    predictions = predictions[:, -1:, :]  # (batch_size, 1, vocab_size)\n",
    "    if not argmax:\n",
    "        top_k_id_, top_k_prob_ = (tf.nn.top_k(predictions, k=k)[1]).numpy()[0][0], \\\n",
    "                                 (tf.nn.top_k(predictions, k=k)[0]).numpy()[0][0]\n",
    "        return top_k_id_, top_k_prob_\n",
    "    else:\n",
    "        return tf.argmax(predictions, axis=-1)\n",
    "\n",
    "\n",
    "def beam_search(sentence, two_way_X, two_way_y, max_length=1000):\n",
    "    encoder_input = tf.cast(tf.convert_to_tensor([tokenize(two_way_X, sentence, X=True)]), tf.int64)\n",
    "    t_init, t_end = two_way_y.get('<t_init>'), two_way_y.get('<t_end>')\n",
    "    start, end = two_way_y.get('<start>'), two_way_y.get('<end>')\n",
    "    space = tf.cast(tf.convert_to_tensor([two_way_y.get('<s>')]), tf.int64)\n",
    "    syl = tf.cast(tf.convert_to_tensor([two_way_y.get('<syl>')]), tf.int64)\n",
    "    output = tf.convert_to_tensor([t_init])\n",
    "    output = tf.expand_dims(output, 0)\n",
    "    output = tf.cast(output, tf.int64)\n",
    "\n",
    "    flows_array = [Flow(output, 1)]\n",
    "    best_flows = []\n",
    "    for u in range(max_length):\n",
    "        new_flow_array = []\n",
    "        for e in flows_array:\n",
    "            prev_pred = e.output.numpy().flatten()\n",
    "            if (len(prev_pred) > 1 and prev_pred[-2] == space and prev_pred[-1] == syl) or \\\n",
    "                    (len(prev_pred) > 1 and prev_pred[-2] == start and prev_pred[-1] == syl):\n",
    "                top_k_id, top_k_prob = next_predictions(encoder_input, e.output, k=K, argmax=False)\n",
    "                for i in range(len(top_k_id)):\n",
    "                    new_out = tf.concat(\n",
    "                        [(copy.deepcopy(e)).output, tf.cast(tf.convert_to_tensor([[top_k_id[i]]]), tf.int64)], axis=-1)\n",
    "                    new_flow_array.append(Flow(new_out, top_k_prob[i] * e.prob))\n",
    "            else:\n",
    "                new_out = tf.concat(\n",
    "                    [(copy.deepcopy(e)).output, next_predictions(encoder_input, e.output, k=K, argmax=True)], axis=-1)\n",
    "                new_flow_array.append(Flow(new_out, e.prob))\n",
    "\n",
    "        flows_array = new_flow_array\n",
    "        # flows_array = sorted(flows_array, key=lambda f: f.prob, reverse=True)[:N_BEAM]\n",
    "        if len(flows_array) > N_BEAM:\n",
    "            flows_array = sampling_flows(flows_array)\n",
    "\n",
    "        to_pop = []\n",
    "        for j, flow in enumerate(flows_array):\n",
    "            if flow.output.numpy().flatten()[-1] == t_end:\n",
    "                best_flows.append(flow)\n",
    "                to_pop.append(flow)\n",
    "        [flows_array.remove(p) for p in to_pop]\n",
    "        if len(best_flows) == N_BEAM:\n",
    "            result = (max(best_flows, key=lambda f: f.prob)).output\n",
    "            text = detokenize(two_way_y, result)\n",
    "            return text"
   ],
   "execution_count": 16,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GkJy3R0DrjLz"
   },
   "source": [
    "# ENCODER DECODER"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "id": "rw8o-6mbrdAu",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1619972148598,
     "user_tz": -120,
     "elapsed": 3727,
     "user": {
      "displayName": "Serban Cristian Tudosie",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjKcHtWlRmEx5gPgHp_XElg5R9_lOdYkNWR-WiUiw=s64",
      "userId": "15345692188992114213"
     }
    }
   },
   "source": [
    "class EncoderLayer(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate=0.1):\n",
    "        super(EncoderLayer, self).__init__()\n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = point_wise_feed_forward_network(d_model, dff)\n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "\n",
    "    def call(self, x, training, mask):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)  # (batch_size, input_seq_len, d_model)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)  # (batch_size, input_seq_len, d_model)\n",
    "        ffn_output = self.ffn(out1)  # (batch_size, input_seq_len, d_model)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)  # (batch_size, input_seq_len, d_model)\n",
    "        return out2\n",
    "\n",
    "\n",
    "class DecoderLayer(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate=0.1):\n",
    "        super(DecoderLayer, self).__init__()\n",
    "        self.mha1 = MultiHeadAttention(d_model, num_heads)\n",
    "        self.mha2 = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = point_wise_feed_forward_network(d_model, dff)\n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm3 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout3 = tf.keras.layers.Dropout(rate)\n",
    "\n",
    "    def call(self, x, enc_output, training, look_ahead_mask, padding_mask):\n",
    "        # enc_output.shape == (batch_size, input_seq_len, d_model)\n",
    "        attn1, attn_weights_block1 = self.mha1(x, x, x, look_ahead_mask)  # (batch_size, target_seq_len, d_model)\n",
    "        attn1 = self.dropout1(attn1, training=training)\n",
    "        out1 = self.layernorm1(attn1 + x)\n",
    "        attn2, attn_weights_block2 = self.mha2(\n",
    "            enc_output, enc_output, out1, padding_mask)  # (batch_size, target_seq_len, d_model)\n",
    "        attn2 = self.dropout2(attn2, training=training)\n",
    "        out2 = self.layernorm2(attn2 + out1)  # (batch_size, target_seq_len, d_model)\n",
    "        ffn_output = self.ffn(out2)  # (batch_size, target_seq_len, d_model)\n",
    "        ffn_output = self.dropout3(ffn_output, training=training)\n",
    "        out3 = self.layernorm3(ffn_output + out2)  # (batch_size, target_seq_len, d_model)\n",
    "        return out3, attn_weights_block1, attn_weights_block2\n",
    "\n",
    "\n",
    "class Encoder(tf.keras.layers.Layer):\n",
    "    def __init__(self, num_layers, d_model, num_heads, dff, input_vocab_size,\n",
    "                 maximum_position_encoding, rate=0.1):\n",
    "        super(Encoder, self).__init__()\n",
    "        self.d_model = d_model\n",
    "        self.num_layers = num_layers\n",
    "        self.embedding = tf.keras.layers.Embedding(input_vocab_size, d_model)\n",
    "        self.pos_encoding = positional_encoding(maximum_position_encoding,\n",
    "                                                self.d_model)\n",
    "        self.enc_layers = [EncoderLayer(d_model, num_heads, dff, rate)\n",
    "                           for _ in range(num_layers)]\n",
    "        self.dropout = tf.keras.layers.Dropout(rate)\n",
    "\n",
    "    def call(self, x, training, mask):\n",
    "        seq_len = tf.shape(x)[1]\n",
    "        # adding embedding and position encoding.\n",
    "        x = self.embedding(x)  # (batch_size, input_seq_len, d_model)\n",
    "        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))\n",
    "        x += self.pos_encoding[:, :seq_len, :]\n",
    "        x = self.dropout(x, training=training)\n",
    "        for i in range(self.num_layers):\n",
    "            x = self.enc_layers[i](x, training, mask)\n",
    "        return x  # (batch_size, input_seq_len, d_model)\n",
    "\n",
    "\n",
    "class Decoder(tf.keras.layers.Layer):\n",
    "    def __init__(self, num_layers, d_model, num_heads, dff, target_vocab_size,\n",
    "                 maximum_position_encoding, rate=0.1):\n",
    "        super(Decoder, self).__init__()\n",
    "        self.d_model = d_model\n",
    "        self.num_layers = num_layers\n",
    "        self.embedding = tf.keras.layers.Embedding(target_vocab_size, d_model)\n",
    "        self.pos_encoding = positional_encoding(maximum_position_encoding, d_model)\n",
    "        self.dec_layers = [DecoderLayer(d_model, num_heads, dff, rate)\n",
    "                           for _ in range(num_layers)]\n",
    "        self.dropout = tf.keras.layers.Dropout(rate)\n",
    "\n",
    "    def call(self, x, enc_output, training, look_ahead_mask, padding_mask):\n",
    "        seq_len = tf.shape(x)[1]\n",
    "        attention_weights = {}\n",
    "        x = self.embedding(x)  # (batch_size, target_seq_len, d_model)\n",
    "        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))\n",
    "        x += self.pos_encoding[:, :seq_len, :]\n",
    "        x = self.dropout(x, training=training)\n",
    "        for i in range(self.num_layers):\n",
    "            x, block1, block2 = self.dec_layers[i](x, enc_output, training,\n",
    "                                                   look_ahead_mask, padding_mask)\n",
    "            attention_weights[f'decoder_layer{i + 1}_block1'] = block1\n",
    "            attention_weights[f'decoder_layer{i + 1}_block2'] = block2\n",
    "        # x.shape == (batch_size, target_seq_len, d_model)\n",
    "        return x, attention_weights\n"
   ],
   "execution_count": 17,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GmSemJjjpNfH"
   },
   "source": [
    "# TRANSFORMER TOOLS"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "id": "QCMw34fepNHC",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1619972148598,
     "user_tz": -120,
     "elapsed": 3721,
     "user": {
      "displayName": "Serban Cristian Tudosie",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjKcHtWlRmEx5gPgHp_XElg5R9_lOdYkNWR-WiUiw=s64",
      "userId": "15345692188992114213"
     }
    }
   },
   "source": [
    "def positional_encoding(position, d_model):\n",
    "    angle_rads = get_angles(np.arange(position)[:, np.newaxis],\n",
    "                            np.arange(d_model)[np.newaxis, :],\n",
    "                            d_model)\n",
    "\n",
    "    angle_rads[:, 0::2] = np.sin(angle_rads[:, 0::2])\n",
    "    angle_rads[:, 1::2] = np.cos(angle_rads[:, 1::2])\n",
    "    pos_encoding = angle_rads[np.newaxis, ...]\n",
    "    return tf.cast(pos_encoding, dtype=tf.float32)\n",
    "\n",
    "\n",
    "def get_angles(pos, i, d_model):\n",
    "    angle_rates = 1 / np.power(10000, (2 * (i // 2)) / np.float32(d_model))\n",
    "    return pos * angle_rates\n",
    "\n",
    "\n",
    "def point_wise_feed_forward_network(d_model, dff):\n",
    "    return tf.keras.Sequential([\n",
    "        tf.keras.layers.Dense(dff, activation='gelu'),  # (batch_size, seq_len, dff)\n",
    "        tf.keras.layers.Dense(d_model)  # (batch_size, seq_len, d_model)\n",
    "    ])\n",
    "\n",
    "\n",
    "def create_padding_mask(seq):\n",
    "    seq = tf.cast(tf.math.equal(seq, 0), tf.float32)\n",
    "    # add extra dimensions to add the padding to the attention logits.\n",
    "    return seq[:, tf.newaxis, tf.newaxis, :]  # (batch_size, 1, 1, seq_len)\n",
    "\n",
    "\n",
    "def create_look_ahead_mask(size):\n",
    "    mask = 1 - tf.linalg.band_part(tf.ones((size, size)), -1, 0)\n",
    "    return mask  # (seq_len, seq_len)\n",
    "\n",
    "\n",
    "def create_masks(inp, tar):\n",
    "    # Encoder padding mask\n",
    "    enc_padding_mask = create_padding_mask(inp)\n",
    "    # Used in the 2nd attention block in the decoder.\n",
    "    # This padding mask is used to mask the encoder outputs.\n",
    "    dec_padding_mask = create_padding_mask(inp)\n",
    "    # Used in the 1st attention block in the decoder.\n",
    "    # It is used to pad and mask future tokens in the input received by the decoder.\n",
    "    look_ahead_mask = create_look_ahead_mask(tf.shape(tar)[1])\n",
    "    dec_target_padding_mask = create_padding_mask(tar)\n",
    "    combined_mask = tf.maximum(dec_target_padding_mask, look_ahead_mask)\n",
    "\n",
    "    return enc_padding_mask, combined_mask, dec_padding_mask\n"
   ],
   "execution_count": 18,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "xuNecFH6o1nU"
   },
   "source": [
    "# TRANSFORMER CLASS"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "id": "7UwyGFL0otlj",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1619972148599,
     "user_tz": -120,
     "elapsed": 3715,
     "user": {
      "displayName": "Serban Cristian Tudosie",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjKcHtWlRmEx5gPgHp_XElg5R9_lOdYkNWR-WiUiw=s64",
      "userId": "15345692188992114213"
     }
    }
   },
   "source": [
    "class Transformer(tf.keras.Model):\n",
    "    def __init__(self, num_layers, d_model, num_heads, dff, input_vocab_size,\n",
    "                 target_vocab_size, pe_input, pe_target, rate=0.1):\n",
    "        super(Transformer, self).__init__()\n",
    "        self.tokenizer = Encoder(num_layers, d_model, num_heads, dff,\n",
    "                                 input_vocab_size, pe_input, rate)\n",
    "        self.decoder = Decoder(num_layers, d_model, num_heads, dff,\n",
    "                               target_vocab_size, pe_target, rate)\n",
    "        self.final_layer = tf.keras.layers.Dense(target_vocab_size)\n",
    "\n",
    "    def call(self, inp, tar, training, enc_padding_mask, look_ahead_mask, dec_padding_mask):\n",
    "        enc_output = self.tokenizer(inp, training, enc_padding_mask)  # (batch_size, inp_seq_len, d_model)\n",
    "        # dec_output.shape == (batch_size, tar_seq_len, d_model)\n",
    "        dec_output, attention_weights = self.decoder(\n",
    "            tar, enc_output, training, look_ahead_mask, dec_padding_mask)\n",
    "        final_output = self.final_layer(dec_output)  # (batch_size, tar_seq_len, target_vocab_size)\n",
    "        return final_output, attention_weights"
   ],
   "execution_count": 19,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Uk3GO3wh8e16"
   },
   "source": [
    "# ENCODE TOKENIZE \\& PERSONAL TOOLS"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "id": "VZGkOv_U8diI",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1619972148816,
     "user_tz": -120,
     "elapsed": 3927,
     "user": {
      "displayName": "Serban Cristian Tudosie",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjKcHtWlRmEx5gPgHp_XElg5R9_lOdYkNWR-WiUiw=s64",
      "userId": "15345692188992114213"
     }
    }
   },
   "source": [
    "def encode_dataset(X, y):\n",
    "    \"\"\"\n",
    "        Creates integer encoded version of the dataset.\n",
    "    \"\"\"\n",
    "    encoded_X = TwoWay()\n",
    "    encoded_set = []\n",
    "    for row in X:\n",
    "        tmp_row = re.sub(r'<start>|<end>|<syl>', r'', row)\n",
    "        [[encoded_set.append(c) for c in w] for w in tmp_row.split('<s>')]\n",
    "    encoded_set += ['<start>', '<end>', '<s>', '<t_init>', '<t_end>']\n",
    "    encoded_set = set(encoded_set)\n",
    "    [encoded_X.add(i + 1, w) for i, w in enumerate(encoded_set)]\n",
    "    with open('gdrive/My Drive/transformer/resources/encoded_X.pickle', 'wb') as handle:\n",
    "        pickle.dump(encoded_X, handle, protocol=pickle.HIGHEST_PROTOCOL)\n",
    "\n",
    "    encoded_y = TwoWay()\n",
    "    encoded_set = []\n",
    "    for row in y:\n",
    "        tmp_row = re.sub(r'<syl>', r'<s>', row)\n",
    "        tmp_row = re.sub(r'<start>|<end>|<c>', r'', tmp_row)\n",
    "        [encoded_set.append(w) for w in tmp_row.split('<s>')]\n",
    "    encoded_set += ['<syl>', '<s>', '<start>', '<end>', '<t_init>', '<t_end>', '<c>']\n",
    "    encoded_set = set(encoded_set)\n",
    "    encoded_set.remove(\"\")\n",
    "    [encoded_y.add(i + 1, w) for i, w in enumerate(encoded_set)]\n",
    "    with open('gdrive/My Drive/transformer/resources/encoded_y.pickle', 'wb') as handle:\n",
    "        pickle.dump(encoded_y, handle, protocol=pickle.HIGHEST_PROTOCOL)\n",
    "\n",
    "    print(\"Data saved successfully!\")\n",
    "\n",
    "\n",
    "def tokenize(two_way, line, X):\n",
    "    spaced_line = re.sub(r'<', r' <', line)\n",
    "    spaced_line = re.sub(r'>', r'> ', spaced_line)\n",
    "    spaced_line = re.sub(r'^ | $', r'', spaced_line)\n",
    "    spaced_line = re.sub(r'[ ]+', r' ', spaced_line)\n",
    "    spaced_line = spaced_line.split(' ')\n",
    "    while True:\n",
    "        try:\n",
    "            spaced_line.remove('')\n",
    "        except ValueError:\n",
    "            break\n",
    "\n",
    "    if X:\n",
    "        tok_X = []\n",
    "        for w in spaced_line:\n",
    "            if w in ['<start>', '<end>', '<s>', '<t_init>', '<t_end>', '<c>']:\n",
    "                tok_X.append(two_way.get(w))\n",
    "            else:\n",
    "                [tok_X.append(two_way.get(c)) for c in w]\n",
    "        return tok_X\n",
    "    else:\n",
    "        return [two_way.get(e) for e in spaced_line]\n",
    "\n",
    "\n",
    "def detokenize(two_way, line):\n",
    "    sentence = [two_way.get(e.numpy()) for e in line[0]]\n",
    "    return ''.join(sentence)\n",
    "\n",
    "\n",
    "def detokenize_(two_way, line):\n",
    "    sentence = [two_way.get(e) for e in line]\n",
    "    return ''.join(sentence)\n",
    "\n",
    "\n",
    "def make_human_understandable(sentence, keep_syl=True):\n",
    "    sentence = re.sub(r'<start>|<t_init>|<t_end>|<end>', r'', sentence)\n",
    "    if keep_syl:\n",
    "        sentence = re.sub(r'<syl>', r'|', sentence)\n",
    "    else:\n",
    "        sentence = re.sub(r'<syl>', r'', sentence)\n",
    "    sentence = re.sub(r'<s>', r' ', sentence)\n",
    "    return sentence\n",
    "\n",
    "\n",
    "def tokenize_pairs(X, y):\n",
    "\n",
    "    X_tok = []\n",
    "    y_tok = []\n",
    "    for i in range(len(X)):\n",
    "        next_to_check = ''\n",
    "        for s in X[i:i + sliding_window_X + sliding_window_y]:\n",
    "            next_to_check += s\n",
    "        if not re.search(r'<canto>', next_to_check):\n",
    "            terz = [tokenize(two_way_X, '<t_init>', X=True)[0]]\n",
    "            terz_y = [tokenize(two_way_y, '<t_init>', X=False)[0]]\n",
    "            for k in range(sliding_window_X):\n",
    "                if (k % 3 == 0) and (k > 0):\n",
    "                    terz += tokenize(two_way_X, '<t_end>', X=True)\n",
    "                    terz += tokenize(two_way_X, '<t_init>',X=True)\n",
    "                terz += (tokenize(two_way_X, X[i + k], X=True))\n",
    "\n",
    "            terz += tokenize(two_way_X, '<t_end>', X=True)\n",
    "            for j in range(sliding_window_y):\n",
    "                terz_y += (tokenize(two_way_y, y[i + j + sliding_window_X], X=False))\n",
    "            terz_y += tokenize(two_way_y, '<t_end>', X=False)\n",
    "            X_tok.append(terz)\n",
    "            y_tok.append(terz_y)\n",
    "\n",
    "    return X_tok, y_tok\n",
    "\n",
    "\n",
    "def make_batches(X_y_tok, batch_size):\n",
    "    batches = []\n",
    "    X_tok, y_tok = X_y_tok\n",
    "    for i in range(0, len(X_tok), batch_size):\n",
    "        if (batch_size + i) < len(X_tok):\n",
    "            batches.append((tf.cast(tf.ragged.constant(X_tok[i:i + batch_size]), tf.int64).to_tensor(),\n",
    "                            (tf.cast(tf.ragged.constant(y_tok[i:i + batch_size]), tf.int64).to_tensor())))\n",
    "        else:\n",
    "            break\n",
    "    return batches"
   ],
   "execution_count": 20,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "QUWxR546pUSP"
   },
   "source": [
    "# TRANSFORMER TRAINING"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Wsly3FnGuAcW",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1619972148816,
     "user_tz": -120,
     "elapsed": 3922,
     "user": {
      "displayName": "Serban Cristian Tudosie",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjKcHtWlRmEx5gPgHp_XElg5R9_lOdYkNWR-WiUiw=s64",
      "userId": "15345692188992114213"
     }
    },
    "outputId": "298aa97a-722c-4396-a0f1-e13edca888d7"
   },
   "source": [
    "!ls"
   ],
   "execution_count": 21,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "divine_transformer.ipynb  README.md  transformer_data\r\n"
     ]
    }
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "id": "nzS2YHQtpAqa",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1619972149476,
     "user_tz": -120,
     "elapsed": 4572,
     "user": {
      "displayName": "Serban Cristian Tudosie",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjKcHtWlRmEx5gPgHp_XElg5R9_lOdYkNWR-WiUiw=s64",
      "userId": "15345692188992114213"
     }
    }
   },
   "source": [
    "class TwoWay:\n",
    "    def __init__(self):\n",
    "        self.d = {}\n",
    "\n",
    "    def add(self, k, v):\n",
    "        self.d[k] = v\n",
    "        self.d[v] = k\n",
    "\n",
    "    def remove(self, k):\n",
    "        self.d.pop(self.d.pop(k))\n",
    "\n",
    "    def get(self, k):\n",
    "        return self.d[k]\n",
    "\n",
    "\n",
    "class CustomSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n",
    "    def __init__(self, d_model, warmup_steps=4000):\n",
    "        super(CustomSchedule, self).__init__()\n",
    "        self.d_model = d_model\n",
    "        self.d_model = tf.cast(self.d_model, tf.float32)\n",
    "        self.warmup_steps = warmup_steps\n",
    "\n",
    "    def __call__(self, step):\n",
    "        arg1 = tf.math.rsqrt(step)\n",
    "        arg2 = step * (self.warmup_steps ** -1.5)\n",
    "        return tf.math.rsqrt(self.d_model) * tf.math.minimum(arg1, arg2)\n",
    "\n",
    "\n",
    "\n",
    "# INITIALIZERS\n",
    "\n",
    "X = np.loadtxt(\"gdrive/My Drive/transformer/resources/X.csv\", dtype=str, delimiter=',', encoding='utf-8')\n",
    "y = np.loadtxt(\"gdrive/My Drive/transformer/resources/y.csv\", dtype=str, delimiter=',', encoding='utf-8')\n",
    "X_val = np.loadtxt(\"gdrive/My Drive/transformer/resources/X_val.csv\", dtype=str, delimiter=',', encoding='utf-8')\n",
    "y_val = np.loadtxt(\"gdrive/My Drive/transformer/resources/y_val.csv\", dtype=str, delimiter=',', encoding='utf-8')\n",
    "X_test = np.loadtxt(\"gdrive/My Drive/transformer/resources/X_test.csv\", dtype=str, delimiter=',', encoding='utf-8')\n",
    "\n",
    "# !!!!!!!!!!!!!!!\n",
    "# encode_dataset(np.hstack((X, X_val)), np.hstack((y, y_val)))\n",
    "\n",
    "with open('gdrive/My Drive/transformer/resources/encoded_X.pickle', 'rb') as f:\n",
    "    two_way_X = pickle.load(f)\n",
    "with open('gdrive/My Drive/transformer/resources/encoded_y.pickle', 'rb') as f:\n",
    "    two_way_y = pickle.load(f)\n",
    "\n",
    "train_step_signature = [\n",
    "    tf.TensorSpec(shape=(None, None), dtype=tf.int64),\n",
    "    tf.TensorSpec(shape=(None, None), dtype=tf.int64),\n",
    "]\n",
    "val_step_signature = [\n",
    "    tf.TensorSpec(shape=(None, None), dtype=tf.int64),\n",
    "    tf.TensorSpec(shape=(None, None), dtype=tf.int64),\n",
    "]\n",
    "\n",
    "\n",
    "learning_rate = CustomSchedule(d_model)\n",
    "optimizer = tf.keras.optimizers.Adam(learning_rate, beta_1=0.9, beta_2=0.98, epsilon=1e-9)\n",
    "\n",
    "loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True, reduction='none')\n",
    "train_loss = tf.keras.metrics.Mean(name='train_loss')\n",
    "train_accuracy = tf.keras.metrics.Mean(name='train_accuracy')\n",
    "val_accuracy = tf.keras.metrics.Mean(name='val_accuracy')\n",
    "val_loss = tf.keras.metrics.Mean(name='val_accuracy')\n",
    "\n",
    "transformer = Transformer(\n",
    "    num_layers=num_layers,\n",
    "    d_model=d_model,\n",
    "    num_heads=num_heads,\n",
    "    dff=dff,\n",
    "    input_vocab_size=len(two_way_X.d),\n",
    "    target_vocab_size=len(two_way_y.d),\n",
    "    pe_input=500,\n",
    "    pe_target=500,\n",
    "    rate=dropout_rate)\n",
    "\n",
    "checkpoint_path = f\"gdrive/My Drive/transformer/checkpoints_{sliding_window_X}x_{sliding_window_y}y_{EPOCHS}ep/train\"\n",
    "ckpt = tf.train.Checkpoint(transformer=transformer, optimizer=optimizer)\n",
    "ckpt_manager = tf.train.CheckpointManager(ckpt, checkpoint_path, max_to_keep=1)\n",
    "# if a checkpoint exists, restore the latest checkpoint.\n",
    "if ckpt_manager.latest_checkpoint:\n",
    "    ckpt.restore(ckpt_manager.latest_checkpoint)\n",
    "    print('Latest checkpoint restored!!')\n",
    "\n",
    "\n",
    "def get_encoder_emb(two_way_X):\n",
    "    weights = transformer.tokenizer.embedding.get_weights()[0]\n",
    "    vocab = two_way_X\n",
    "\n",
    "    out_v = io.open('gdrive/My Drive/transformer/training_data/vectors_enc.tsv', 'w', encoding='utf-8')\n",
    "    out_m = io.open('gdrive/My Drive/transformer/training_data/metadata_enc.tsv', 'w', encoding='utf-8')\n",
    "    for index in range(len(vocab.d) // 2):\n",
    "        if index == 0:\n",
    "            continue  # skip 0, it's padding.\n",
    "        vec = weights[index]\n",
    "        out_v.write('\\t'.join([str(x) for x in vec]) + \"\\n\")\n",
    "        out_m.write(vocab.get(index) + \"\\n\")\n",
    "    out_v.close()\n",
    "    out_m.close()\n",
    "\n",
    "def get_decoder_emb(two_way_y):\n",
    "    weights = transformer.decoder.embedding.get_weights()[0]\n",
    "    vocab = two_way_y\n",
    "\n",
    "    out_v = io.open('gdrive/My Drive/transformer/training_data/vectors_dec.tsv', 'w', encoding='utf-8')\n",
    "    out_m = io.open('gdrive/My Drive/transformer/training_data/metadata_dec.tsv', 'w', encoding='utf-8')\n",
    "    for index in range(len(vocab.d) // 2):\n",
    "        if index == 0:\n",
    "            continue  # skip 0, it's padding.\n",
    "        vec = weights[index]\n",
    "        out_v.write('\\t'.join([str(x) for x in vec]) + \"\\n\")\n",
    "        out_m.write(vocab.get(index) + \"\\n\")\n",
    "    out_v.close()\n",
    "    out_m.close()\n",
    "\n",
    "def accuracy_function(real, pred):\n",
    "    accuracies = tf.equal(real, tf.argmax(pred, axis=2))\n",
    "    mask = tf.math.logical_not(tf.math.equal(real, 0))\n",
    "    accuracies = tf.math.logical_and(mask, accuracies)\n",
    "    accuracies = tf.cast(accuracies, dtype=tf.float32)\n",
    "    mask = tf.cast(mask, dtype=tf.float32)\n",
    "    return tf.reduce_sum(accuracies) / tf.reduce_sum(mask)\n",
    "\n",
    "\n",
    "def loss_function(real, pred):\n",
    "    mask = tf.math.logical_not(tf.math.equal(real, 0))\n",
    "    loss_ = loss_object(real, pred)\n",
    "    mask = tf.cast(mask, dtype=loss_.dtype)\n",
    "    loss_ *= mask\n",
    "    return tf.reduce_sum(loss_) / tf.reduce_sum(mask)\n",
    "\n",
    "\n",
    "def fit(train_batches, val_batches):\n",
    "    train_accuracies = []\n",
    "    val_accuracies = []\n",
    "    train_losses = []\n",
    "    val_losses = []\n",
    "\n",
    "    for epoch in range(EPOCHS):\n",
    "        start = time.time()\n",
    "        train_loss.reset_states()\n",
    "        train_accuracy.reset_states()\n",
    "        val_loss.reset_states()\n",
    "        val_accuracy.reset_states()\n",
    "\n",
    "        for (batch, (inp, tar)) in enumerate(train_batches):\n",
    "            train_step(inp, tar)\n",
    "            inp_val, tar_val = val_batches[batch % len(val_batches)]\n",
    "            validation_step(inp_val, tar_val)\n",
    "\n",
    "            if batch % PRINT_EACH_BATCHES == 0:\n",
    "                print(\n",
    "                    f'Epoch {epoch + 1} Batch {batch}'\n",
    "                    f' - Loss {train_loss.result():.4f}'\n",
    "                    f' - Accuracy {train_accuracy.result():.4f}'\n",
    "                    f' - Val Loss {val_loss.result():.4f}'\n",
    "                    f' - Val Accuracy {val_accuracy.result():.4f}'\n",
    "                )\n",
    "\n",
    "                train_accuracies.append(train_accuracy.result())\n",
    "                val_accuracies.append(val_accuracy.result())\n",
    "                train_losses.append(train_loss.result())\n",
    "                val_losses.append(val_loss.result())\n",
    "\n",
    "                if (epoch + 1) % SAVING_STEP == 0:\n",
    "                    ckpt_save_path = ckpt_manager.save()\n",
    "                    print(f'Saving checkpoint for epoch {epoch + 1} at {ckpt_save_path}')\n",
    "                    np.save('gdrive/My Drive/transformer/training_data/train_accuracies.npy', train_accuracies)\n",
    "                    np.save('gdrive/My Drive/transformer/training_data/val_accuracies.npy', val_accuracies)\n",
    "                    np.save('gdrive/My Drive/transformer/training_data/train_losses.npy', train_losses)\n",
    "                    np.save('gdrive/My Drive/transformer/training_data/val_losses.npy', val_losses)\n",
    "\n",
    "                    get_encoder_emb(two_way_X)\n",
    "                    get_decoder_emb(two_way_y)\n",
    "\n",
    "        print(f'Epoch {epoch + 1} Loss {train_loss.result():.4f} Accuracy {train_accuracy.result():.4f}')\n",
    "        print(f'Time taken for 1 epoch: {time.time() - start:.2f} secs\\n')\n",
    "\n",
    "    return np.array(train_accuracies), np.array(train_losses), np.array(val_accuracies), np.array(val_losses)\n",
    "\n",
    "\n",
    "@tf.function(input_signature=train_step_signature)\n",
    "def train_step(inp, tar):\n",
    "    tar_inp = tar[:, :-1]\n",
    "    tar_real = tar[:, 1:]\n",
    "    enc_padding_mask, combined_mask, dec_padding_mask = create_masks(inp, tar_inp)\n",
    "    with tf.GradientTape() as tape:\n",
    "        predictions, _ = transformer(inp, tar_inp,\n",
    "                                     True,\n",
    "                                     enc_padding_mask,\n",
    "                                     combined_mask,\n",
    "                                     dec_padding_mask)\n",
    "        loss = loss_function(tar_real, predictions)\n",
    "\n",
    "    gradients = tape.gradient(loss, transformer.trainable_variables)\n",
    "    optimizer.apply_gradients(zip(gradients, transformer.trainable_variables))\n",
    "    train_loss(loss)\n",
    "    train_accuracy(accuracy_function(tar_real, predictions))\n",
    "\n",
    "\n",
    "@tf.function(input_signature=val_step_signature)\n",
    "def validation_step(inp, tar):\n",
    "    tar_inp = tar[:, :-1]\n",
    "    tar_real = tar[:, 1:]\n",
    "    enc_padding_mask, combined_mask, dec_padding_mask = create_masks(inp, tar_inp)\n",
    "    predictions, _ = transformer(inp, tar_inp,\n",
    "                                 False,\n",
    "                                 enc_padding_mask,\n",
    "                                 combined_mask,\n",
    "                                 dec_padding_mask)\n",
    "    loss = loss_function(tar_real, predictions)\n",
    "    val_loss(loss)\n",
    "    val_accuracy(accuracy_function(tar_real, predictions))"
   ],
   "execution_count": 22,
   "outputs": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "s5uYNRK2sbmW"
   },
   "source": [
    "# MAIN"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "id": "6ynLiX5NrNI9",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1619972168591,
     "user_tz": -120,
     "elapsed": 23682,
     "user": {
      "displayName": "Serban Cristian Tudosie",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjKcHtWlRmEx5gPgHp_XElg5R9_lOdYkNWR-WiUiw=s64",
      "userId": "15345692188992114213"
     }
    }
   },
   "source": [
    "# print((detokenize_(two_way_X, tokenize_pairs(X, y)[0][0])))\n",
    "# print((detokenize_(two_way_y, tokenize_pairs(X, y)[1][0])))\n",
    "\n",
    "\n",
    "train_batches = make_batches(tokenize_pairs(X, y), batch_size=BATCH_SIZE)\n",
    "val_batches = make_batches(tokenize_pairs(X_val, y_val), batch_size=BATCH_SIZE)"
   ],
   "execution_count": 23,
   "outputs": []
  },
  {
   "cell_type": "code",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 673
    },
    "id": "uTN7sagkRqNz",
    "executionInfo": {
     "status": "error",
     "timestamp": 1619972601863,
     "user_tz": -120,
     "elapsed": 456949,
     "user": {
      "displayName": "Serban Cristian Tudosie",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjKcHtWlRmEx5gPgHp_XElg5R9_lOdYkNWR-WiUiw=s64",
      "userId": "15345692188992114213"
     }
    },
    "outputId": "2ef37ee7-ddff-487b-8ad2-ca29ffb3f999"
   },
   "source": [
    "#Saves pkl with new words not in X\n",
    "'''\n",
    "with open('gdrive/My Drive/transformer/resources/encoded_X.pickle', 'wb') as handle:\n",
    "    pickle.dump(two_way_X, handle, protocol=pickle.HIGHEST_PROTOCOL)\n",
    "with open('gdrive/My Drive/transformer/resources/encoded_y.pickle', 'wb') as handle:\n",
    "    pickle.dump(two_way_y, handle, protocol=pickle.HIGHEST_PROTOCOL)\n",
    "'''\n",
    "\n",
    "# UNCOMMENT TO TRAIN\n",
    "# train_accuracies, train_losses, val_accuracies, val_losses = fit(train_batches, val_batches)\n",
    "\n",
    "def generator(length):\n",
    "    array_input = list(X_val[0:sliding_window_X])\n",
    "    last_input_array = []\n",
    "    for i in range(length):\n",
    "        if last_input_array:\n",
    "            [array_input.pop(0) for _ in range(sliding_window_y)]\n",
    "            for e in last_input_array:\n",
    "                array_input.append(re.sub(r'<syl>', '', e))\n",
    "        # from array to text\n",
    "        text_input = '<t_init>'\n",
    "        for k, s in enumerate(array_input):\n",
    "            if (k % 3 == 0) and (k > 0):\n",
    "                text_input += '<t_end>'\n",
    "                text_input += '<t_init>'\n",
    "            text_input += s\n",
    "        text_input += '<t_end>'\n",
    "        # end textification\n",
    "        text_input = re.sub(r'<c>', r'', text_input)\n",
    "        last_input = beam_search(text_input, two_way_X, two_way_y, max_length=5000)\n",
    "        last_input = re.sub(r'<t_init>|<t_end>', r'', last_input)\n",
    "        last_input = re.sub(r'<end>', r'<end>+', last_input)\n",
    "        last_input_array = last_input.split('+')\n",
    "        for l in last_input_array:\n",
    "            print(make_human_understandable(l, True))\n",
    "        print()\n",
    "\n",
    "\n",
    "generator(10)"
   ],
   "execution_count": 24,
   "outputs": [
    {
     "ename": "InvalidArgumentError",
     "evalue": "Incompatible shapes: [1,501,256] vs. [1,500,256] [Op:AddV2]",
     "output_type": "error",
     "traceback": [
      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[0;31mInvalidArgumentError\u001B[0m                      Traceback (most recent call last)",
      "\u001B[0;32m<ipython-input-24-113293860068>\u001B[0m in \u001B[0;36m<module>\u001B[0;34m\u001B[0m\n\u001B[1;32m     37\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     38\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m---> 39\u001B[0;31m \u001B[0mgenerator\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;36m10\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m     40\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m<ipython-input-24-113293860068>\u001B[0m in \u001B[0;36mgenerator\u001B[0;34m(length)\u001B[0m\n\u001B[1;32m     28\u001B[0m         \u001B[0;31m# end textification\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     29\u001B[0m         \u001B[0mtext_input\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mre\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0msub\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34mr'<c>'\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34mr''\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mtext_input\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m---> 30\u001B[0;31m         \u001B[0mlast_input\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mbeam_search\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mtext_input\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mtwo_way_X\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mtwo_way_y\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mmax_length\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;36m5000\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m     31\u001B[0m         \u001B[0mlast_input\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mre\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0msub\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34mr'<t_init>|<t_end>'\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34mr''\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mlast_input\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     32\u001B[0m         \u001B[0mlast_input\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mre\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0msub\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34mr'<end>'\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34mr'<end>+'\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mlast_input\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m<ipython-input-16-00a62938e485>\u001B[0m in \u001B[0;36mbeam_search\u001B[0;34m(sentence, two_way_X, two_way_y, max_length)\u001B[0m\n\u001B[1;32m     66\u001B[0m             \u001B[0;32melse\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     67\u001B[0m                 new_out = tf.concat(\n\u001B[0;32m---> 68\u001B[0;31m                     [(copy.deepcopy(e)).output, next_predictions(encoder_input, e.output, k=K, argmax=True)], axis=-1)\n\u001B[0m\u001B[1;32m     69\u001B[0m                 \u001B[0mnew_flow_array\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mappend\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mFlow\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mnew_out\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0me\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mprob\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     70\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m<ipython-input-16-00a62938e485>\u001B[0m in \u001B[0;36mnext_predictions\u001B[0;34m(encoder_input, output, k, argmax)\u001B[0m\n\u001B[1;32m     26\u001B[0m \u001B[0;32mdef\u001B[0m \u001B[0mnext_predictions\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mencoder_input\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0moutput\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mk\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0margmax\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     27\u001B[0m     \u001B[0menc_padding_mask\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mcombined_mask\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mdec_padding_mask\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mcreate_masks\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mencoder_input\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0moutput\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m---> 28\u001B[0;31m     predictions, attention_weights = transformer(encoder_input,\n\u001B[0m\u001B[1;32m     29\u001B[0m                                                  \u001B[0moutput\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     30\u001B[0m                                                  \u001B[0;32mFalse\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m~/PycharmProjects/TryingCuda/venv38/lib/python3.8/site-packages/tensorflow/python/keras/engine/base_layer.py\u001B[0m in \u001B[0;36m__call__\u001B[0;34m(self, *args, **kwargs)\u001B[0m\n\u001B[1;32m   1010\u001B[0m         with autocast_variable.enable_auto_cast_variables(\n\u001B[1;32m   1011\u001B[0m             self._compute_dtype_object):\n\u001B[0;32m-> 1012\u001B[0;31m           \u001B[0moutputs\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mcall_fn\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0minputs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m*\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   1013\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1014\u001B[0m         \u001B[0;32mif\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_activity_regularizer\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m<ipython-input-19-7c8ed62276b5>\u001B[0m in \u001B[0;36mcall\u001B[0;34m(self, inp, tar, training, enc_padding_mask, look_ahead_mask, dec_padding_mask)\u001B[0m\n\u001B[1;32m     12\u001B[0m         \u001B[0menc_output\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mtokenizer\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0minp\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mtraining\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0menc_padding_mask\u001B[0m\u001B[0;34m)\u001B[0m  \u001B[0;31m# (batch_size, inp_seq_len, d_model)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     13\u001B[0m         \u001B[0;31m# dec_output.shape == (batch_size, tar_seq_len, d_model)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m---> 14\u001B[0;31m         dec_output, attention_weights = self.decoder(\n\u001B[0m\u001B[1;32m     15\u001B[0m             tar, enc_output, training, look_ahead_mask, dec_padding_mask)\n\u001B[1;32m     16\u001B[0m         \u001B[0mfinal_output\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mfinal_layer\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mdec_output\u001B[0m\u001B[0;34m)\u001B[0m  \u001B[0;31m# (batch_size, tar_seq_len, target_vocab_size)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m~/PycharmProjects/TryingCuda/venv38/lib/python3.8/site-packages/tensorflow/python/keras/engine/base_layer.py\u001B[0m in \u001B[0;36m__call__\u001B[0;34m(self, *args, **kwargs)\u001B[0m\n\u001B[1;32m   1010\u001B[0m         with autocast_variable.enable_auto_cast_variables(\n\u001B[1;32m   1011\u001B[0m             self._compute_dtype_object):\n\u001B[0;32m-> 1012\u001B[0;31m           \u001B[0moutputs\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mcall_fn\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0minputs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m*\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   1013\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1014\u001B[0m         \u001B[0;32mif\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_activity_regularizer\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m<ipython-input-17-9d57b28b0514>\u001B[0m in \u001B[0;36mcall\u001B[0;34m(self, x, enc_output, training, look_ahead_mask, padding_mask)\u001B[0m\n\u001B[1;32m     89\u001B[0m         \u001B[0mx\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0membedding\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mx\u001B[0m\u001B[0;34m)\u001B[0m  \u001B[0;31m# (batch_size, target_seq_len, d_model)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     90\u001B[0m         \u001B[0mx\u001B[0m \u001B[0;34m*=\u001B[0m \u001B[0mtf\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mmath\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0msqrt\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mtf\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mcast\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0md_model\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mtf\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mfloat32\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m---> 91\u001B[0;31m         \u001B[0mx\u001B[0m \u001B[0;34m+=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mpos_encoding\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m:\u001B[0m\u001B[0mseq_len\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m:\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m     92\u001B[0m         \u001B[0mx\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mdropout\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mx\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mtraining\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mtraining\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     93\u001B[0m         \u001B[0;32mfor\u001B[0m \u001B[0mi\u001B[0m \u001B[0;32min\u001B[0m \u001B[0mrange\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mnum_layers\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m~/PycharmProjects/TryingCuda/venv38/lib/python3.8/site-packages/tensorflow/python/ops/math_ops.py\u001B[0m in \u001B[0;36mbinary_op_wrapper\u001B[0;34m(x, y)\u001B[0m\n\u001B[1;32m   1162\u001B[0m     \u001B[0;32mwith\u001B[0m \u001B[0mops\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mname_scope\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;32mNone\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mop_name\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m[\u001B[0m\u001B[0mx\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0my\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m)\u001B[0m \u001B[0;32mas\u001B[0m \u001B[0mname\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1163\u001B[0m       \u001B[0;32mtry\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1164\u001B[0;31m         \u001B[0;32mreturn\u001B[0m \u001B[0mfunc\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mx\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0my\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mname\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mname\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   1165\u001B[0m       \u001B[0;32mexcept\u001B[0m \u001B[0;34m(\u001B[0m\u001B[0mTypeError\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mValueError\u001B[0m\u001B[0;34m)\u001B[0m \u001B[0;32mas\u001B[0m \u001B[0me\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1166\u001B[0m         \u001B[0;31m# Even if dispatching the op failed, the RHS may be a tensor aware\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m~/PycharmProjects/TryingCuda/venv38/lib/python3.8/site-packages/tensorflow/python/util/dispatch.py\u001B[0m in \u001B[0;36mwrapper\u001B[0;34m(*args, **kwargs)\u001B[0m\n\u001B[1;32m    199\u001B[0m     \u001B[0;34m\"\"\"Call target, and fall back on dispatchers if there is a TypeError.\"\"\"\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    200\u001B[0m     \u001B[0;32mtry\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 201\u001B[0;31m       \u001B[0;32mreturn\u001B[0m \u001B[0mtarget\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m*\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    202\u001B[0m     \u001B[0;32mexcept\u001B[0m \u001B[0;34m(\u001B[0m\u001B[0mTypeError\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mValueError\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    203\u001B[0m       \u001B[0;31m# Note: convert_to_eager_tensor currently raises a ValueError, not a\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m~/PycharmProjects/TryingCuda/venv38/lib/python3.8/site-packages/tensorflow/python/ops/math_ops.py\u001B[0m in \u001B[0;36m_add_dispatch\u001B[0;34m(x, y, name)\u001B[0m\n\u001B[1;32m   1484\u001B[0m     \u001B[0;32mreturn\u001B[0m \u001B[0mgen_math_ops\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0madd\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mx\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0my\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mname\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mname\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1485\u001B[0m   \u001B[0;32melse\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1486\u001B[0;31m     \u001B[0;32mreturn\u001B[0m \u001B[0mgen_math_ops\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0madd_v2\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mx\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0my\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mname\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mname\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   1487\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1488\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m~/PycharmProjects/TryingCuda/venv38/lib/python3.8/site-packages/tensorflow/python/ops/gen_math_ops.py\u001B[0m in \u001B[0;36madd_v2\u001B[0;34m(x, y, name)\u001B[0m\n\u001B[1;32m    470\u001B[0m       \u001B[0;32mreturn\u001B[0m \u001B[0m_result\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    471\u001B[0m     \u001B[0;32mexcept\u001B[0m \u001B[0m_core\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_NotOkStatusException\u001B[0m \u001B[0;32mas\u001B[0m \u001B[0me\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 472\u001B[0;31m       \u001B[0m_ops\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mraise_from_not_ok_status\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0me\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mname\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    473\u001B[0m     \u001B[0;32mexcept\u001B[0m \u001B[0m_core\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_FallbackException\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    474\u001B[0m       \u001B[0;32mpass\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m~/PycharmProjects/TryingCuda/venv38/lib/python3.8/site-packages/tensorflow/python/framework/ops.py\u001B[0m in \u001B[0;36mraise_from_not_ok_status\u001B[0;34m(e, name)\u001B[0m\n\u001B[1;32m   6860\u001B[0m   \u001B[0mmessage\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0me\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mmessage\u001B[0m \u001B[0;34m+\u001B[0m \u001B[0;34m(\u001B[0m\u001B[0;34m\" name: \"\u001B[0m \u001B[0;34m+\u001B[0m \u001B[0mname\u001B[0m \u001B[0;32mif\u001B[0m \u001B[0mname\u001B[0m \u001B[0;32mis\u001B[0m \u001B[0;32mnot\u001B[0m \u001B[0;32mNone\u001B[0m \u001B[0;32melse\u001B[0m \u001B[0;34m\"\"\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   6861\u001B[0m   \u001B[0;31m# pylint: disable=protected-access\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 6862\u001B[0;31m   \u001B[0msix\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mraise_from\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mcore\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_status_to_exception\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0me\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mcode\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mmessage\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;32mNone\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   6863\u001B[0m   \u001B[0;31m# pylint: enable=protected-access\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   6864\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m~/PycharmProjects/TryingCuda/venv38/lib/python3.8/site-packages/six.py\u001B[0m in \u001B[0;36mraise_from\u001B[0;34m(value, from_value)\u001B[0m\n",
      "\u001B[0;31mInvalidArgumentError\u001B[0m: Incompatible shapes: [1,501,256] vs. [1,500,256] [Op:AddV2]"
     ]
    }
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "id": "sx1SxSpCynEj",
    "pycharm": {
     "name": "#%%\n"
    },
    "executionInfo": {
     "status": "aborted",
     "timestamp": 1619972601860,
     "user_tz": -120,
     "elapsed": 456938,
     "user": {
      "displayName": "Serban Cristian Tudosie",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GjKcHtWlRmEx5gPgHp_XElg5R9_lOdYkNWR-WiUiw=s64",
      "userId": "15345692188992114213"
     }
    }
   },
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "def plot_attention_head(in_tokens, translated_tokens, attention):\n",
    "    translated_tokens = translated_tokens[1:]\n",
    "    ax = plt.gca()\n",
    "    ax.matshow(attention)\n",
    "    ax.set_xticks(range(len(in_tokens)))\n",
    "    ax.set_yticks(range(len(translated_tokens)))\n",
    "    labels = [label.decode('utf-8') for label in in_tokens.numpy()]\n",
    "    ax.set_xticklabels(labels, rotation=90)\n",
    "    labels = [label.decode('utf-8') for label in translated_tokens.numpy()]\n",
    "    ax.set_yticklabels(labels)\n",
    "\n",
    "\n",
    "def print_acc_loss():\n",
    "    train_accuracies = np.load(f'gdrive/My Drive/transformer/training_data_{sliding_window_X}x_{sliding_window_y}y_{EPOCHS}ep/train_accuracies.npy')\n",
    "    val_accuracies = np.load(f'gdrive/My Drive/transformer/training_data_{sliding_window_X}x_{sliding_window_y}y_{EPOCHS}ep/val_accuracies.npy')\n",
    "    train_losses = np.load(f'gdrive/My Drive/transformer/training_data_{sliding_window_X}x_{sliding_window_y}y_{EPOCHS}ep/train_losses.npy')\n",
    "    val_losses = np.load(f'gdrive/My Drive/transformer/training_data_{sliding_window_X}x_{sliding_window_y}y_{EPOCHS}ep/val_losses.npy')\n",
    "\n",
    "    x = np.linspace(1, EPOCHS, len(train_accuracies))\n",
    "\n",
    "    plt.title(\"Accuracies\")\n",
    "    plt.plot(x, train_accuracies)\n",
    "    plt.plot(x, val_accuracies)\n",
    "    plt.xlabel(\"Epochs\")\n",
    "    plt.ylabel(\"Accuracy\")\n",
    "    plt.legend([\"train_acc\", \"val_acc\"])\n",
    "    plt.grid()\n",
    "    plt.tight_layout()\n",
    "    plt.savefig(f'gdrive/My Drive/transformer/training_data_{sliding_window_X}x_{sliding_window_y}y_{EPOCHS}ep'\n",
    "                f'/Acc_{sliding_window_X}x_{sliding_window_y}y_{EPOCHS}ep_chars.png')\n",
    "    plt.show()\n",
    "    print()\n",
    "\n",
    "    plt.title(\"Losses\")\n",
    "    plt.plot(x, train_losses)\n",
    "    plt.plot(x, val_losses)\n",
    "    plt.xlabel(\"Epochs\")\n",
    "    plt.ylabel(\"Loss\")\n",
    "    plt.legend([\"train_loss\", \"val_loss\"])\n",
    "    plt.grid()\n",
    "    plt.tight_layout()\n",
    "    plt.savefig(f'gdrive/My Drive/transformer/training_data_{sliding_window_X}x_{sliding_window_y}y_{EPOCHS}ep'\n",
    "                f'/Loss_{sliding_window_X}x_{sliding_window_y}y_{EPOCHS}ep_chars.png')\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "print_acc_loss()"
   ],
   "execution_count": 25,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  }
 ]
}